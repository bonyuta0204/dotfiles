""""""""""""""""""""""""""""""
" Basic Configuration
""""""""""""""""""""""""""""""
" Esesntial Settings  {{{
set nocompatible
syntax enable

set showcmd
set hidden "keep buffers background
set confirm "confirm to save files
"}}}
" Indent and tab {{{
set ruler
set autoindent
set shiftwidth=2
set tabstop=2
set expandtab
" for windows
set shellslash
"}}}
" backup files {{{
set noswapfile

if empty(glob('~/.vim/temp'))
  call mkdir(expand('~/.vim/temp'), "p")
endif

set backupdir=~/.vim/temp/
set directory=~/.vim/temp/
set undodir=~/.vim/temp/
"}}}
" Character Settings {{{
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac
set list "show listchars
set listchars=tab:>-,trail:-,nbsp:%,eol:$
set backspace=indent,start,eol
set t_vb=
set formatoptions=crql
set visualbell
"}}}
" status line and Command line {{{
set laststatus=2
set noshowmode " don't show mode. instead use lightline'
set wildmenu "command completion
set cmdheight=2
"}}}
" Search Settings {{{
set hlsearch
set incsearch
"}}}
" Editor UI {{{
set conceallevel=0
set number
set colorcolumn=80      "80文字目にラインを入れる
if has('termguicolors')
  set termguicolors
endif
"}}}
"  Other Options "{{{
set clipboard=unnamed
set pastetoggle=<F10>
source $VIMRUNTIME/macros/matchit.vim
runtime! ftplugin/man.vim

" }}}

""""""""""""""""""""""""""""""
" dein.vimの設定
""""""""""""""""""""""""""""""
"{{{
"
" Install dein.vim if it is not installed yet
let s:dein_dir = finddir('dein.vim', '.;')
if s:dein_dir != '' || &runtimepath !~ '/dein.vim'
  if s:dein_dir == '' && &runtimepath !~ '/dein.vim'
    let s:dein_dir = expand('~/.vim/dein/repos/github.com/Shougo/dein.vim')
    if !isdirectory(s:dein_dir)
      execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
    endif
  endif
  execute 'set runtimepath^=' . substitute(
        \ fnamemodify(s:dein_dir, ':p') , '/$', '', '')
endif

let s:dein_toml_file = expand('~/.vim/dein/plugins.toml')
let s:dein_toml_lazy_file = expand('~/.vim/dein/lazy.toml')

if dein#load_state('~/.vim/dein')
  call dein#begin('~/.vim/dein')

  " Let dein manage dein
  if filereadable(s:dein_toml_file)
    call dein#load_toml(s:dein_toml_file, {'lazy': 0})
  endif

  if filereadable(s:dein_toml_lazy_file)
    call dein#load_toml(s:dein_toml_lazy_file, {'lazy': 1})
  endif

  call dein#end()
  call dein#save_state()
endif

"extra runtimepath
set runtimepath+=~/.fzf "fuzzy search
set runtimepath+=/usr/local/bin "fuzzy search
set path+=~/.vim/dein/repos/github.com
"}}}


""""""""""""""""""""""""""""""
"キーマッピングの設定
""""""""""""""""""""""""""""""
" デフォルト書き換え系 {{{
let mapleader = " " "<Leader>を<Space>に設定
noremap! jk <Esc>
nnoremap j gj
nnoremap k gk
inoremap jj <RIGHT>
nnoremap <C-]> g<C-]>
tnoremap jk <C-\><C-n>
"}}}
" ファイル開く系ショートカット"{{{
nnoremap <Leader>rc :<C-u>edit $MYVIMRC<CR>
nnoremap <Leader>ft :<C-u>execute 'edit' . fnameescape("~/.vim/after/ftplugin/" . &filetype . '.vim')<CR>
nnoremap <F5> :<C-u>source<Space>$MYVIMRC<CR>
nnoremap cmd :<C-u>VimShell<CR>
nnoremap <Leader>sni :<C-u>NeoSnippetEdit -runtime<CR>
nnoremap <Leader>es :<C-u>NeoSnippetEdit<CR>
nnoremap <C-n> :<C-u>NERDTreeToggle<CR>
nnoremap <C-e> :<C-u>Explore<CR>
"}}}
" 括弧補完 {{{
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>
"}}}
" Window関連 {{{
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

nnoremap<Leader>H <C-w>H
nnoremap<Leader>J <C-w>J
nnoremap<Leader>K <C-w>K
nnoremap<Leader>L <C-w>L

"split of window
nnoremap <Leader>s :<C-u>split<CR><C-w>j
nnoremap <Leader>v :<C-u>vsplit<CR><C-w>l
"}}}
" for accelerated-jk "{{{
if exists('g:accelerated_jk_enable_deceleration')
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
endif
"}}}


""""""""""""""""""""""""""""""
" プラグインの設定
""""""""""""""""""""""""""""""
" fzf.vim {{{
nnoremap <Leader>ef :<C-u>Files<CR>
nnoremap <Leader>em :<C-u>Maps<CR>
nnoremap <Leader>eb :<C-u>Buffers<CR>
nnoremap <Leader>eh :<C-u>History<CR>
nnoremap <Leader>ag :<C-u>Ag<CR>
"}}}
" ack.vim {{{
let g:ackprg = "ag --vimgrep"
"}}}
" quickrun {{{
let g:quickrun_no_default_key_mappings = 1
nnoremap <Leader>r :<C-u>QuickRun -runner terminal -runner/terminal/opener "vert new"<CR>
"}}}
"
" neco-syntax の設定 {{{
let g:necosyntax#min_keyword_length = 2
"}}}

" ALE configureation {{{
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 0
let g:ale_fixers = {
\ 'python': [
    \ 'autopep8',
    \ 'yapf',
    \ 'isort'
    \ ],
\ 'ruby': ['rubocop'],
\ 'javascript': [
    \ 'prettier',
    \ 'eslint'
    \ ],
\ 'typescript': [
    \ 'prettier',
    \ 'eslint'
    \ ],
\ 'vue': [
    \ 'prettier',
    \ 'eslint'
    \ ],
\ 'css': [
    \ 'prettier'
    \ ],
\ 'html': [
    \ 'remove_trailing_lines', 'trim_whitespace'
    \ ]
\ }

let g:ale_fix_on_save = 0
let g:ale_virtualenv_dir_names = []
nmap <F8> <Plug>(ale_fix)
"}}}

" Emmet Settings "{{{
let g:user_emmet_leader_key='<c-t>'
"}}}
" IndentLine Settings"{{{
let g:indentLine_bufTypeExclude = ['help','terminal']
let g:indentLine_fileTypeExclude = ['help','man']
"}}}

" easymotion settings{{{
nmap s <Plug>(easymotion-overwin-f2)
let g:EasyMotion_smartcase = 1
" }}}


" matchit setting{{{
if !exists('loaded_matchit')
  " matchitを有効化
  runtime macros/matchit.vim
endif
"}}}
"
" vim-ariline settings{{{
let g:airline_powerline_fonts = 0
"}}}


""""""""""""""""""""""""""""""
" vim-vue settings
""""""""""""""""""""""""""""""
let g:vue_pre_processors = ['pug', 'scss']
" 参考: https://qiita.com/macoshita/items/3f95a6d61af41085db58
autocmd FileType vue syntax sync fromstart


" nvim-lsp settings
"
if has('nvim-0.5')
lua << END
  -- require'lspconfig'.tsserver.setup{}
  -- require'lspconfig'.solargraph.setup{}
  -- require'lspconfig'.vimls.setup{}
  -- require'lspconfig'.vuels.setup{}
  -- require'lspconfig'.hls.setup{}
  -- require'lspconfig'.sumneko_lua.setup{}
  -- require'lspconfig'.bashls.setup{}


  -- キーバインディングの設定
  -- @see https://github.com/neovim/nvim-lspconfig#keybindings-and-completion
  local nvim_lsp = require('lspconfig')

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    -- Enable completion triggered by <c-x><c-o>
    buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings.
    local opts = { noremap=true, silent=true }

    -- See `:help vim.lsp.*` for documentation on any of the below functions
    buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
    buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
    buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
    buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

  end

  -- nvim-lsp-installer settings
  -- @see https://github.com/williamboman/nvim-lsp-installer
  -- @see https://zenn.dev/nazo6/articles/c2f16b07798bab
  local lsp_installer = require("nvim-lsp-installer")
  lsp_installer.on_server_ready(function(server)
      local opts = {}
      opts.on_attach = on_attach

      server:setup(opts)
      vim.cmd [[ do User LspAttachBuffers ]]
  end)
END

"nvim-cmp setting
lua <<EOF
  -- Setup nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
      snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    mapping = {
      ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
      ['<C-e>'] = cmp.mapping({
        i = cmp.mapping.abort(),
        c = cmp.mapping.close(),
      }),
      -- Accept currently selected item. If none selected, `select` first item.
      -- Set `select` to `false` to only confirm explicitly selected items.
      ['<CR>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
EOF


set omnifunc=v:lua.vim.lsp.omnifunc

else
  echo 'Please use neovim v0.5.0 or later to use lsp feature'
endif

""""""""""""""""""""""""""""""
" Original Commans
""""""""""""""""""""""""""""""
"{{{
function! RSpec()
  let s:current_file = @%
  vertical belowright new
  echomsg "bundle exec rspec"  .  " " . s:current_file
  let s:spec_channel = termopen("bundle exec rspec"  .  " " . s:current_file)
endfunction

"}}}

""""""""""""""""""""""""""""""
" Language Specific Configuration
""""""""""""""""""""""""""""""
" Terminal Mode Settings{{{
  augroup MyTerminal
    autocmd BufEnter,BufWinEnter * if &buftype ==# "terminal" | normal i
  augroup END
"}}}

"}}}
" CSS settings "{{{
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci
"}}}

" Help settings {{{
augroup Help
  autocmd!
  autocmd FileType help,man call InitHelp()
  autocmd BufEnter,WinEnter * if &filetype ==# 'help'| call InitHelp()
  autocmd BufEnter,WinEnter * if &filetype ==# 'man'| call InitHelp()
augroup End

function! InitHelp ()
  wincmd H
  vertical resize 80
endfunction
" }}}
"
"CPP header file{{{
set path+=/usr/include/c++/5
"}}}

"Run CPP file in terminal{{{
function! RunCpp()
  let s:tempfile = tempname() . ".cpp"
  let s:tempexe = tempname()
  execute "write " . s:tempfile
  let s:command = printf("g++ %s -o %s && %s", s:tempfile, s:tempexe, s:tempexe)
  vertical new
  let s:_bufnr = termopen(s:command)
endfunction

"}}}

""""""""""""""""""""""""""""""
" ColorScheme
""""""""""""""""""""""""""""""
"{{{
try
  colorscheme gruvbox
  set background=dark
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme default
endtry

let g:rehash256 = 1
augroup MyColorScheme
  autocmd ColorScheme * highlight MatchParen gui=bold,underline guibg=#3D3469 guifg=NONE
augroup END

"}}}
"

" This must be written at the bottom of .vimrc
filetype indent plugin on
