""""""""""""""""""""""""""""""
" Basic Configuration
""""""""""""""""""""""""""""""
" Esesntial Settings  {{{
set nocompatible
syntax enable

set showcmd
set hidden "keep buffers background
set confirm "confirm to save files
"}}}
" Indent and tab {{{
set ruler
set autoindent
set shiftwidth=2
set tabstop=2
set expandtab
" for windows
set shellslash
"}}}
" backup files {{{
set noswapfile

if empty(glob('~/.vim/temp'))
  call mkdir(expand('~/.vim/temp'), "p")
endif

set backupdir=~/.vim/temp/
set directory=~/.vim/temp/
set undodir=~/.vim/temp/
"}}}
" Character Settings {{{
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac
set list "show listchars
set listchars=tab:>-,trail:-,nbsp:%,eol:$
set backspace=indent,start,eol
set t_vb=
set formatoptions=crql
set visualbell
"}}}
" status line and Command line {{{
set laststatus=2
set noshowmode " don't show mode. instead use lightline'
set wildmenu "command completion
set cmdheight=2
"}}}
" Search Settings {{{
set hlsearch
set incsearch
"}}}
" Editor UI {{{
set conceallevel=0
set number
set colorcolumn=80      "80文字目にラインを入れる
if has('termguicolors')
  set termguicolors
endif
"}}}
"  Other Options "{{{
set clipboard=unnamed
set pastetoggle=<F10>
source $VIMRUNTIME/macros/matchit.vim
runtime! ftplugin/man.vim

" }}}



""""""""""""""""""""""""""""""
" Neovim Configuration
""""""""""""""""""""""""""""""
"{{{
let g:python3_host_skip_check=1
let g:python_host_skip_check = 1
let g:loaded_python_provider = 1
if !empty(glob("/home/python/3.5/bin"))
  let g:python3_host_prog = expand("/home/python/3.5/bin/python")
endif
if !empty(glob("/home/python/2.7/bin"))
  let g:python_host_prog = expand("/home/python/2.7/bin/python2")
endif
if !empty(glob("/usr/bin/python3"))
  let g:python3_host_prog = expand("/usr/bin/python3")
endif
"}}}


""""""""""""""""""""""""""""""
" dein.vimの設定
""""""""""""""""""""""""""""""
"{{{
"
" Install dein.vim if it is not installed yet
let s:dein_dir = finddir('dein.vim', '.;')
if s:dein_dir != '' || &runtimepath !~ '/dein.vim'
  if s:dein_dir == '' && &runtimepath !~ '/dein.vim'
    let s:dein_dir = expand('~/.vim/dein/repos/github.com/Shougo/dein.vim')
    if !isdirectory(s:dein_dir)
      execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
    endif
  endif
  execute 'set runtimepath^=' . substitute(
        \ fnamemodify(s:dein_dir, ':p') , '/$', '', '')
endif

let s:dein_toml_file = expand('~/.vim/dein/plugins.toml')
let s:dein_toml_lazy_file = expand('~/.vim/dein/lazy.toml')

if dein#load_state('~/.vim/dein')
  call dein#begin('~/.vim/dein')

  " Let dein manage dein
  if filereadable(s:dein_toml_file)
    call dein#load_toml(s:dein_toml_file, {'lazy': 0})
  endif

  if filereadable(s:dein_toml_lazy_file)
    call dein#load_toml(s:dein_toml_lazy_file, {'lazy': 1})
  endif

  call dein#end()
  call dein#save_state()
endif

"extra runtimepath
set runtimepath+=~/.fzf "fuzzy search
set path+=~/.vim/dein/repos/github.com
"}}}


""""""""""""""""""""""""""""""
"キーマッピングの設定
""""""""""""""""""""""""""""""
" デフォルト書き換え系 {{{
let mapleader = " " "<Leader>を<Space>に設定
noremap! jk <Esc>
nnoremap j gj
nnoremap k gk
inoremap jj <RIGHT>
nnoremap <C-]> g<C-]>
tnoremap jk <C-\><C-n>
"}}}
" ファイル開く系ショートカット"{{{
nnoremap <Leader>rc :<C-u>edit $MYVIMRC<CR>
nnoremap <Leader>ft :<C-u>execute 'edit' . fnameescape("~/.vim/after/ftplugin/" . &filetype . '.vim')<CR>
nnoremap <F5> :<C-u>source<Space>$MYVIMRC<CR>
nnoremap cmd :<C-u>VimShell<CR>
nnoremap <Leader>sni :<C-u>NeoSnippetEdit -runtime<CR>
nnoremap <Leader>es :<C-u>NeoSnippetEdit<CR>
nnoremap <C-n> :<C-u>NERDTreeToggle<CR>
nnoremap <C-e> :<C-u>Explore<CR>
"}}}
" 括弧補完 {{{
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>
"}}}
" Window関連 {{{
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l

nnoremap<Leader>H <C-w>H
nnoremap<Leader>J <C-w>J
nnoremap<Leader>K <C-w>K
nnoremap<Leader>L <C-w>L

"split of window
nnoremap <Leader>s :<C-u>split<CR><C-w>j
nnoremap <Leader>v :<C-u>vsplit<CR><C-w>l
"}}}
" for accelerated-jk "{{{
if exists('g:accelerated_jk_enable_deceleration')
  nmap j <Plug>(accelerated_jk_gj)
  nmap k <Plug>(accelerated_jk_gk)
endif
"}}}


""""""""""""""""""""""""""""""
" プラグインの設定
""""""""""""""""""""""""""""""
" fzf.vim {{{
nnoremap <Leader>ef :<C-u>Files<CR>
nnoremap <Leader>em :<C-u>Maps<CR>
nnoremap <Leader>eb :<C-u>Buffers<CR>
nnoremap <Leader>eh :<C-u>History<CR>
nnoremap <Leader>ag :<C-u>Ag<CR>
"}}}
" ack.vim {{{
let g:ackprg = "ag --vimgrep"
"}}}
" quickrun {{{
let g:quickrun_no_default_key_mappings = 1
nnoremap <Leader>r :<C-u>QuickRun -runner terminal -runner/terminal/opener "vert new"<CR>
"}}}
" deoplete の設定 {{{
if has('nvim')
  let g:deoplete#enable_at_startup = 1
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ deoplete#mappings#manual_complete()

  function! s:check_back_space() abort "{{{
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction "}}}
endif
"}}}
" deoplete python の設定 {{{
if !empty(glob("~/.conda/envs/video/bin"))
let g:deoplete#sources#jedi#python_path = expand("$HOME/.conda/envs/video/bin/python3")
endif

if !empty(glob("~/miniconda3/envs/video/bin/"))
let g:deoplete#sources#jedi#python_path = expand("$HOME/miniconda3/envs/video/bin/python")
endif
"}}}
" neco-syntax の設定 {{{
let g:necosyntax#min_keyword_length = 2
"}}}
" NeoComplete の設定 {{{
if has('lua') && !has('nvim')
  "Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g>     neocomplete#undo_completion()
  inoremap <expr><C-l>     neocomplete#complete_common_string()

  " Recommended key-mappings.
  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
    " For no inserting <CR> key.
    "return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
  " Close popup by <Space>.
  inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif
  let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
  let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
  " javascript補完
  let g:neocomplete#sources#omni#input_patterns.javascript = '\h\w*\|[^. \t]\.\w*\|\$\w*'

endif
" }}}
" NeoComplCache の設定 {{{
if !has('lua') && !has('nvim')
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
						\ 'default' : ''
						\ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
		return neocomplcache#smart_close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
endif
" }}}
" ALE configureation {{{
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 0
let g:ale_fixers = {
\ 'python': [
\ 'autopep8',
\ 'yapf',
\ 'isort'],
\ 'ruby': [
\ 'rubocop'],
\ 'javascript': [
\ 'prettier',
\ 'eslint'],
\ 'css': [
\ 'prettier'],
\ 'html': [
\ 'remove_trailing_lines', 'trim_whitespace']
\ }
let g:ale_fix_on_save = 0
let g:ale_virtualenv_dir_names = []
nmap <F8> <Plug>(ale_fix)
"}}}
" light line config "{{{
"let g:lightline = {
      "\ 'colorscheme': 'wombat',
      "\ 'active': {
      "\   'left':[['mode', 'paste'],
      "\          ['readonly', 'relativepath', 'modified']]
      "\  },
      "\ 'component_function': {
      "\   'gitbranch': 'fugitive#head'
      "\ },
      "\}
"}}}
" setting for neosnippet {{{
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"


" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'
"}}}
" Emmet Settings "{{{
let g:user_emmet_leader_key='<c-t>'
"}}}
" IndentLine Settings"{{{
let g:indentLine_bufTypeExclude = ['help','terminal']
let g:indentLine_fileTypeExclude = ['help','man']
"}}}
" deoplete-ternjs setting{{{
let g:tern#filetypes = [
            \ 'jsx',
            \ 'javascript.jsx',
            \ 'vue',
            \ 'slim'
            \ ]
"}}}
"
" easymotion settings{{{
nmap s <Plug>(easymotion-overwin-f2)
let g:EasyMotion_smartcase = 1
" }}}

" matchit setting{{{
if !exists('loaded_matchit')
  " matchitを有効化
  runtime macros/matchit.vim
endif
"}}}
" vim-ariline settings{{{
let g:airline_powerline_fonts = 0
"}}}

""""""""""""""""""""""""""""""
" Original Commans
""""""""""""""""""""""""""""""
"{{{
function! RSpec()
  let s:current_file = @%
  vertical belowright new
  echomsg "bundle exec rspec"  .  " " . s:current_file
  let s:spec_channel = termopen("bundle exec rspec"  .  " " . s:current_file)
endfunction

"}}}

""""""""""""""""""""""""""""""
" Language Specific Configuration
""""""""""""""""""""""""""""""
" Terminal Mode Settings{{{
  augroup MyTerminal
    autocmd BufEnter,BufWinEnter * if &buftype ==# "terminal" | normal i
  augroup END
"}}}
"Racket Settings "{{{
function! OpenRacket()
  let s:current_file = @%
  if !exists("g:racket_loaded")
    vertical belowright new
    let s:channel = termopen("racket")
    let g:racket_loaded = 1
    let g:racket_buffer = bufnr("%")
    let g:racket_channel = s:channel
    setlocal filetype=racket
  elseif bufwinnr(g:racket_buffer) ==# -1
    execute "vertical belowright split #" . g:racket_buffer
  endif
  call chansend(g:racket_channel, [",enter " . s:current_file ,  ""])
endfunction


if executable("racket")
  command! -nargs=0 Racket :call OpenRacket()
  command! -nargs=0 RacketPreview :call OpenRacketPreview()
endif


augroup SchemeCmd
  autocmd!
  "autocmd ColorScheme * call rainbow_parentheses#activate()
  autocmd FileType racket,scheme inoremap <buffer> ' '
  autocmd FileType racket,scheme call rainbow_parentheses#load(0)
  "autocmd BufWritePost,FileWritePost * if &filetype ==# 'racket' | Racket
  autocmd FileType racket nnoremap <buffer> <F11> :<C-u>Racket<CR>
  autocmd FileType racket setlocal foldmethod=indent
  autocmd BufWinEnter *.rkt Racket
augroup END
"}}}
" Vue.js settings "{{{
autocmd FileType vue syntax sync fromstart
"}}}
" CSS settings "{{{
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci
"}}}
" Help settings {{{
augroup Help
  autocmd!
  autocmd FileType help,man call InitHelp()
  autocmd BufEnter,WinEnter * if &filetype ==# 'help'| call InitHelp()
  autocmd BufEnter,WinEnter * if &filetype ==# 'man'| call InitHelp()
augroup End

function! InitHelp ()
  wincmd H
  vertical resize 80
endfunction
" }}}
"CPP header file{{{
set path+=/usr/include/c++/5
"}}}
"Run CPP file in terminal{{{
function! RunCpp()
  let s:tempfile = tempname() . ".cpp"
  let s:tempexe = tempname()
  execute "write " . s:tempfile
  let s:command = printf("g++ %s -o %s && %s", s:tempfile, s:tempexe, s:tempexe)
  vertical new
  let s:_bufnr = termopen(s:command)
endfunction

"}}}

""""""""""""""""""""""""""""""
" ColorScheme
""""""""""""""""""""""""""""""
"{{{
try
  colorscheme gruvbox
  set background=dark
catch /^Vim\%((\a\+)\)\=:E185/
  colorscheme default
endtry

let g:rehash256 = 1
augroup MyColorScheme
  autocmd ColorScheme * highlight MatchParen gui=bold,underline guibg=#3D3469 guifg=NONE
augroup END

"pcolorscheme neodark

"}}}

" This must be written at the bottom of .vimrc
filetype indent plugin on
