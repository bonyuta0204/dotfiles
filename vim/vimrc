
""""""""""""""""""""""""""""""
" Basic Configuration
""""""""""""""""""""""""""""""
" {{{
set nocompatible
filetype indent plugin on
syntax on
set hidden
set wildmenu
set showcmd
set hlsearch
set incsearch
set backspace=indent,start,eol
set autoindent
set ruler
set shiftwidth=2
set tabstop=2
set laststatus=2
set expandtab
set formatoptions=crql
set noshowmode " don't show mode. instead use lightline'
set confirm
set list

set listchars=tab:>-,trail:-,nbsp:%,eol:$

set visualbell
set t_vb=
set cmdheight=2
set number


"邪魔なフォルダの保存先を変更する
set backupdir=~/.vim/temp/
set directory=~/.vim/temp/
set undodir=~/.vim/temp/


"文字コードの設定
set encoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set fileformats=unix,dos,mac

" use OS clipboard
set clipboard=unnamed

set colorcolumn=80      " その代わり80文字目にラインを入れる
" ステータスラインの色を変える
set laststatus=2

if has('termguicolors')
  set termguicolors
endif

" F10でpasteモードの切り替え
set pastetoggle=<F10>
source $VIMRUNTIME/macros/matchit.vim

" }}}

""""""""""""""""""""""""""""""
" NeoBundleの設定
""""""""""""""""""""""""""""""
"{{{
if has('vim_starting')
		set runtimepath+=~/.vim/bundle/neobundle.vim
endif
call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'


""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""
NeoBundle "scrooloose/nerdtree"
NeoBundle "Shougo/unite.vim"
NeoBundle 'Shougo/vimproc.vim', {
			\ 'build' : {
			\     'windows' : 'tools\\update-dll-mingw',
			\     'cygwin' : 'make -f make_cygwin.mak',
			\     'mac' : 'make',
			\     'linux' : 'make',
			\     'unix' : 'gmake',
			\    },
			\ }
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'thinca/vim-ref'
NeoBundle "Shougo/vimshell"
set rtp+=~/.fzf "fuzzy search
NeoBundle 'junegunn/fzf.vim' "fuzzy search
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-fugitive' "git client
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'itchyny/lightline.vim' "status line
NeoBundle 'bronson/vim-trailing-whitespace'


""""""""""""""""""""""""""""""
" Colorschemes
""""""""""""""""""""""""""""""
NeoBundle "KeitaNakamura/neodark.vim"
NeoBundle "tomasr/molokai"


""""""""""""""""""""""""""""""
" Complation
""""""""""""""""""""""""""""""
if has('lua')
	NeoBundle 'Shougo/neocomplete.vim'
else
	NeoBundle 'Shougo/neocomplcache'
endif
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'


""""""""""""""""""""""""""""""
" html and Css
""""""""""""""""""""""""""""""
NeoBundle 'mattn/emmet-vim'
NeoBundle 'slim-template/vim-slim'


""""""""""""""""""""""""""""""
" ruby plugins
""""""""""""""""""""""""""""""
NeoBundle 'tpope/vim-rails'
NeoBundle 'basyura/unite-rails'
NeoBundle 'yuku-t/vim-ref-ri'


""""""""""""""""""""""""""""""
" python plugins
""""""""""""""""""""""""""""""
NeoBundle 'davidhalter/jedi-vim'


""""""""""""""""""""""""""""""
" javascript plugins
""""""""""""""""""""""""""""""
NeoBundle 'othree/yajs.vim' "hight for ES6 Syntax
NeoBundle 'posva/vim-vue'
NeoBundle 'ternjs/tern_for_vim'


""""""""""""""""""""""""""""""
" Others
""""""""""""""""""""""""""""""
NeoBundle 'dag/vim-fish.git' "fish highting


call neobundle#end()
"}}} NeoBundleここまで


""""""""""""""""""""""""""""""
" quickrunの設定
""""""""""""""""""""""""""""""
"{{{
nmap <Leader>r <Plug>(quickrun)
let s:hooks = neobundle#get_hooks("vim-quickrun")
function! s:hooks.on_source(bundle)
  let g:quickrun_config = {
      \ "*": {"runner": "remote/vimproc"},
      \ }
endfunction
"}}}

""""""""""""""""""""""""""""""
" light line config
""""""""""""""""""""""""""""""
"{{{
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left':[['mode', 'paste'],
      \          ['readonly', 'relativepath', 'modified']]
      \  },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \}

"}}}


""""""""""""""""""""""""""""""
" setting for neosnippet
""""""""""""""""""""""""""""""
"{{{
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/neosnippet-snippets/snippets/'
"}}}

" settings for emmet
"{{{
let g:user_emmet_leader_key='<c-t>'
"}}}

""""""""""""""""""""""""""""""
"キーマッピングの設定
""""""""""""""""""""""""""""""
"{{{
"<Leader>を<Space>に設定
let mapleader = " "
noremap! jk <Esc>

" 論理行ではなくて表示行で移動する
nnoremap j gj
nnoremap k gk

nnoremap <Leader>rc :<C-u>edit ~/.vimrc<CR>
nnoremap <F5> :<C-u>source<Space>$MYVIMRC<CR>
nnoremap cmd :<C-u>VimShell<CR>


""""""""""""""""""""""""""""""
" 自動的に閉じ括弧を入力
""""""""""""""""""""""""""""""
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>


""""""""""""""""""""""""""""""
" <Leader>hjkl でWindowの移動
""""""""""""""""""""""""""""""
nnoremap <Leader>h <C-w>h
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k
nnoremap <Leader>l <C-w>l


""""""""""""""""""""""""""""""
" <Leader>HJKL でWindowを移動
""""""""""""""""""""""""""""""
nnoremap<Leader>H <C-w>H
nnoremap<Leader>J <C-w>J
nnoremap<Leader>K <C-w>K
nnoremap<Leader>L <C-w>L

"split of window
nnoremap <Leader>s :<C-u>split<CR><C-w>j
nnoremap <Leader>v :<C-u>vsplit<CR><C-w>l
" create new line at the bottom of the file and go into insert line
nnoremap <Leader>o Go

" disable arrow keys(for practice)
noremap <LEFT> <Nop>
noremap <RIGHT> <Nop>
noremap <UP> <Nop>
noremap <DOWN> <Nop>

inoremap <LEFT> <Nop>
inoremap <RIGHT> <Nop>
inoremap <UP> <Nop>
inoremap <DOWN> <Nop>
" disable esc keys(practice)

" jjで１マス先から入力開始
inoremap jj <RIGHT>

"
" key mapping for programming

inoremap += <space>+=<space>
inoremap -= <space>-=<space>
inoremap *= <space>*=<space>

" key map for tag jump
nnoremap <C-]> g<C-]>

nnoremap <Leader>sni :<C-u>edit ~/.vim/bundle/neosnippet-snippets/neosnippets<CR>
nnoremap <Leader>es :<C-u>NeoSnippetEdit<CR>
nnoremap <C-n> :<C-u>NERDTreeToggle<CR>
nnoremap <C-e> :<C-u>Explore<CR>
"}}}


""""""""""""""""""""""""""""""
" colorscheme
""""""""""""""""""""""""""""""
"{{{

"colorscheme neodark
"
"hi Folded ctermfg=240
"hi LineNr ctermfg=250 ctermbg=240
"
"au InsertEnter * hi StatusLine term=reverse ctermbg=5 gui=bold,reverse
"			\ guisp=Magenta guibg=#FFFFFF guifg=#84B97C
"au InsertLeave * hi StatusLine term=reverse ctermfg=0 ctermbg=2 gui=bold
"			\ guibg=#639EE4 guifg=#FFFFFF

let g:rehash256 = 1
colorscheme molokai

"}}}


""""""""""""""""""""""""""""""
" Unite.vimの設定
""""""""""""""""""""""""""""""
" {{{
"キーマッピング

" The prefix key.
nnoremap [unite] <Nop>
nmap  <Leader>f [unite]

"
nnoremap [unite]u :<C-u>Unite<space>
nnoremap <silent> [unite]f :<C-u>Unite<space>file<CR>
nnoremap <silent> [unite]b :<C-u>Unite<space>buffer<CR>
nnoremap <silent> [unite]h :<C-u>Unite<space>file_mru<CR>
nnoremap <silent> [unite]a :<C-u>Unite<space>file<space>buffer<space>bookmark<space>file_mru<CR>

" }}}
"
""""""""""""""""""""""""""""""
" NeoCompleteCache の設定
""""""""""""""""""""""""""""""
" {{{
if !has('lua')
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
						\ 'default' : ''
						\ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
		return neocomplcache#smart_close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
endif
" }}}

"------------------------------------
" Unite-rails.vim
"------------------------------------
"{{{
function! UniteRailsSetting()
  nnoremap    [unite-rails]   <Nop>
  nmap    <Leader>u [unite-rails]
  nnoremap [unite-rails]v  :<C-U>Unite rails/view<CR>
  nnoremap [unite-rails]m  :<C-U>Unite rails/model<CR>
  nnoremap [unite-rails]c  :<C-U>Unite rails/controller<CR>
  nnoremap [unite-rails]h  :<C-U>Unite rails/helper<CR>

endfunction
aug MyAutoCmd
  au User Rails call UniteRailsSetting()
aug END
"}}}


"------------------------------------
" fzf.vim
"------------------------------------
"{{{
nnoremap <Leader>ef :<C-u>Files<CR>
nnoremap <Leader>em :<C-u>Maps<CR>
nnoremap <Leader>eb :<C-u>Buffers<CR>
nnoremap <Leader>ag :<C-u>Ag<CR>
"}}}


""""""""""""""""""""""""""""""
" NeoComplete の設定
""""""""""""""""""""""""""""""
" {{{
if has('lua')
"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'


""""""""""""""""""""""""""""""
" javascript補完
""""""""""""""""""""""""""""""
let g:neocomplete#sources#omni#input_patterns.javascript = '\h\w*\|[^. \t]\.\w*\|\$\w*'


endif
" }}}


""""""""""""""""""""""""""""""
" Vue.js settings
""""""""""""""""""""""""""""""
autocmd FileType vue syntax sync fromstart


filetype indent plugin on
"html settings
"{{{
augroup html

	autocmd!
	autocmd FileType html inoremap <buffer> < <><Left>
"}}}

